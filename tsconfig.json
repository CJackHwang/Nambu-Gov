{
  "compilerOptions": {
    // --- 基本选项 ---
    "target": "ESNext", // 编译目标 ECMAScript 版本
    "useDefineForClassFields": true, // 使用标准方式定义类字段
    "module": "ESNext", // 模块系统
    "moduleResolution": "Bundler", // (推荐) 模块解析策略，更符合现代打包工具行为
    "strict": true, // 启用所有严格类型检查选项
    "jsx": "preserve", // 保留 JSX 供 Vue 处理
    "sourceMap": true, // 生成 .map 文件，用于调试
    "resolveJsonModule": true, // 允许导入 .json 文件
    "isolatedModules": true, // (Vite 需要) 确保每个文件可以被安全地单独转译
    "esModuleInterop": true, // 改善与 CommonJS 模块的互操作性
    "lib": ["ESNext", "DOM"], // 包含的库定义 (浏览器环境 + 最新 JS 特性)
    "skipLibCheck": true, // 跳过对声明文件 (*.d.ts) 的类型检查，加快编译速度
    "noEmit": true, // (重要) TypeScript 只进行类型检查，不输出 JS 文件 (Vite 负责构建)

    // --- 路径别名配置 ---
    "baseUrl": ".", // 解析非相对模块名的基准目录 (项目根目录)
    "paths": {
      "@/*": ["src/*"] // 这是关键：告诉 TypeScript 如何解析 '@/*' 路径
    }
  },
  // --- 包含的文件 ---
  "include": [
    "src/**/*.ts",     // 包含 src 下所有 .ts 文件
    "src/**/*.d.ts",   // 包含 src 下所有 .d.ts 文件
    "src/**/*.tsx",    // 包含 src 下所有 .tsx 文件 (如果使用 TSX)
    "src/**/*.vue",    // (重要) 包含 src 下所有 .vue 文件，以便类型检查 <script setup lang="ts">
    "vite.config.ts" // 也检查 vite 配置文件本身
   ],
  // --- 排除的文件 ---
  "exclude": [
    "node_modules",   // 排除 node_modules 目录
    "dist"            // 排除构建输出目录
  ],
  // --- 项目引用 (标准 Vite Vue TS 模板包含) ---
  "references": [{ "path": "./tsconfig.node.json" }] // 引用用于 Node.js 环境的配置 (如 vite.config.ts)
}